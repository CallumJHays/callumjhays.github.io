{"pageProps":{"source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Recently I came across Python's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Annotated\"), \" type while \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/micropython/micropython-lib/issues/190#issuecomment-751616492\"\n  }, \"migrating the \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"typing_extensions\"), \" library to micropython\"), \". After some brief googling there didn't appear to be much info in the community on how to use it, so I decided to write this post.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Annotated\"), \" type is the main focus of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.python.org/dev/peps/pep-0593/\"\n  }, \"PEP 539\"), \" released with the standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typing\"), \" module in Python >= 3.9 or with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typing_extensions\"), \" library in previous versions.\"), mdx(\"p\", null, \"In its basic form, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Annotated\"), \" lets you pack arbitrary python objects as a tuple in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__metadata__\"), \" attribute of a type object:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from typing_extensions import Annotated\\n\\nSpecialInt = Annotated[int, \\\"str Annotation\\\", 42, {'hello': 'world'}]\\n\\nprint(SpecialInt.__metadata__)\\n# ('str Annotation', 42, {'hello': 'world'})\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"PS: Usually \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__attr__\"), \"s are better not accessed directly; there's\\ngenerally a stdlib function that should be used instead (such as\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setattr()\"), \"). However I haven't been able to find one for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__metadata__\"), \" (\\xAF\", \"\\\\\", \"_\", \"(\\u30C4)\", \"_\", \"/\\xAF)\")), mdx(\"p\", null, \"One of the best use-cases of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Annotated\"), \" I can think of is data validation for function inputs. Note there's a bit of code required for the examples below to work.\"), mdx(\"p\", null, \"You can get the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gist.github.com/CallumJHays/e4ad98925894a8e1cd7ef57e90fe2807/\"\n  }, \"full working code here\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from typing_extensions import Annotated as An\\nfrom runtype_validation import validate, InRange\\n\\n@validate\\ndef test_fn(a: An[int, InRange(0, 100)],\\n            b: An[float, InRange(0, 1)]):\\n    pass\\n\\ntest_fn(50, 0.5) # works\\n\\ntest_fn(0.5, 0.5)\\n# TypeError: Expected a to have type <class 'int'> but got <class 'float'>\\n\\ntest_fn(b=2, a=50)\\n# AssertionError: Argument b=2 not in range [0, 1)\\n\")), mdx(\"p\", null, \"This works for class methods as well:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class Test:\\n    @validate\\n    def __init__(self,\\n                 a: An[int, InRange(0, 100)],\\n                 b: An[float, InRange(0, 1)]):\\n        pass\\n\")), mdx(\"p\", null, \"One can also extend it as a class decorator, applying the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@validate\"), \" each method of the class:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# equivalent to previous example\\n\\n@validate\\nclass Test:\\n    def __init__(...etc): ...\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typing.Annotated\"), \" is a very powerful and flexible tool when properly understood. If you have any other ideas for how to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Annotated\"), \", I'd love to hear about it in the comments below!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Recently I came across Python&#x27;s <span class=\"px-1 font-mono rounded gray bg-yellow-100\">Annotated</span> type while <span><span class=\" cursor-pointer underline text-green-500\">migrating the <span class=\"px-1 font-mono rounded gray bg-yellow-100\">typing_extensions</span> library to micropython</span></span>. After some brief googling there didn&#x27;t appear to be much info in the community on how to use it, so I decided to write this post.</p><p>The <span class=\"px-1 font-mono rounded gray bg-yellow-100\">Annotated</span> type is the main focus of <span><span class=\" cursor-pointer underline text-green-500\">PEP 539</span></span> released with the standard <span class=\"px-1 font-mono rounded gray bg-yellow-100\">typing</span> module in Python &gt;= 3.9 or with the <span class=\"px-1 font-mono rounded gray bg-yellow-100\">typing_extensions</span> library in previous versions.</p><p>In its basic form, <span class=\"px-1 font-mono rounded gray bg-yellow-100\">Annotated</span> lets you pack arbitrary python objects as a tuple in a <span class=\"px-1 font-mono rounded gray bg-yellow-100\">__metadata__</span> attribute of a type object:</p><pre><div class=\"my-2 rounded overflow-hidden\"><pre class=\"prism-code language-python\" style=\"background-color:#2a2734;color:#9a86fd;padding:20px\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token keyword\" style=\"color:#ffcc99\">from</span><span class=\"token plain\"> typing_extensions </span><span class=\"token keyword\" style=\"color:#ffcc99\">import</span><span class=\"token plain\"> Annotated</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">SpecialInt </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> Annotated</span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;str Annotation&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">42</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;hello&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;world&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">print</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token plain\">SpecialInt</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">__metadata__</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#6c6783\"># (&#x27;str Annotation&#x27;, 42, {&#x27;hello&#x27;: &#x27;world&#x27;})</span><span class=\"token plain\"></span></div></pre></div></pre><blockquote><p>PS: Usually <span class=\"px-1 font-mono rounded gray bg-yellow-100\">__attr__</span>s are better not accessed directly; there&#x27;s\ngenerally a stdlib function that should be used instead (such as\n<span class=\"px-1 font-mono rounded gray bg-yellow-100\">setattr()</span>). However I haven&#x27;t been able to find one for <span class=\"px-1 font-mono rounded gray bg-yellow-100\">__metadata__</span> (¯<!-- -->\\<!-- -->_<!-- -->(ツ)<!-- -->_<!-- -->/¯)</p></blockquote><p>One of the best use-cases of <span class=\"px-1 font-mono rounded gray bg-yellow-100\">Annotated</span> I can think of is data validation for function inputs. Note there&#x27;s a bit of code required for the examples below to work.</p><p>You can get the <span><span class=\" cursor-pointer underline text-green-500\">full working code here</span></span>.</p><pre><div class=\"my-2 rounded overflow-hidden\"><pre class=\"prism-code language-python\" style=\"background-color:#2a2734;color:#9a86fd;padding:20px\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token keyword\" style=\"color:#ffcc99\">from</span><span class=\"token plain\"> typing_extensions </span><span class=\"token keyword\" style=\"color:#ffcc99\">import</span><span class=\"token plain\"> Annotated </span><span class=\"token keyword\" style=\"color:#ffcc99\">as</span><span class=\"token plain\"> An</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">from</span><span class=\"token plain\"> runtype_validation </span><span class=\"token keyword\" style=\"color:#ffcc99\">import</span><span class=\"token plain\"> validate</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> InRange</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#6c6783\">@validate</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#9a86fd\">test_fn</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token plain\">a</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> An</span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> InRange</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">100</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">            b</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> An</span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> InRange</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">pass</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">test_fn</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token number\" style=\"color:#e09142\">50</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">0.5</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"> </span><span class=\"token comment\" style=\"color:#6c6783\"># works</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">test_fn</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token number\" style=\"color:#e09142\">0.5</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">0.5</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#6c6783\"># TypeError: Expected a to have type &lt;class &#x27;int&#x27;&gt; but got &lt;class &#x27;float&#x27;&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">test_fn</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token plain\">b</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> a</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">50</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#6c6783\"># AssertionError: Argument b=2 not in range [0, 1)</span><span class=\"token plain\"></span></div></pre></div></pre><p>This works for class methods as well:</p><pre><div class=\"my-2 rounded overflow-hidden\"><pre class=\"prism-code language-python\" style=\"background-color:#2a2734;color:#9a86fd;padding:20px\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token keyword\" style=\"color:#ffcc99\">class</span><span class=\"token plain\"> </span><span class=\"token class-name\">Test</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token decorator annotation punctuation\" style=\"color:#6c6783\">@validate</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#9a86fd\">__init__</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token plain\">self</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">                 a</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> An</span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> InRange</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">100</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">                 b</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> An</span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> InRange</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#ffcc99\">pass</span><span class=\"token plain\"></span></div></pre></div></pre><p>One can also extend it as a class decorator, applying the <span class=\"px-1 font-mono rounded gray bg-yellow-100\">@validate</span> each method of the class:</p><pre><div class=\"my-2 rounded overflow-hidden\"><pre class=\"prism-code language-python\" style=\"background-color:#2a2734;color:#9a86fd;padding:20px\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token comment\" style=\"color:#6c6783\"># equivalent to previous example</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#6c6783\">@validate</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">class</span><span class=\"token plain\"> </span><span class=\"token class-name\">Test</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#9a86fd\">__init__</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">etc</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\"></span></div></pre></div></pre><p><span class=\"px-1 font-mono rounded gray bg-yellow-100\">typing.Annotated</span> is a very powerful and flexible tool when properly understood. If you have any other ideas for how to use <span class=\"px-1 font-mono rounded gray bg-yellow-100\">Annotated</span>, I&#x27;d love to hear about it in the comments below!</p>","scope":{"title":"How to use typing.Annotated in Python","subtitle":"Declerative runtime argument validation in Python with typing.Annotated","preview":"PythonLogo.png","published":"11 Jan 2020","edited":"07 Oct 2022"}},"frontMatter":{"title":"How to use typing.Annotated in Python","subtitle":"Declerative runtime argument validation in Python with typing.Annotated","preview":"PythonLogo.png","published":"11 Jan 2020","edited":"07 Oct 2022"}},"__N_SSG":true}